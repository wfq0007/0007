#3轮DES差分攻击


p11 = '97D2078984F010B4'
c11 = '719849F28E5313BF'
p12 = '4A5C783384F010B4'
c12 = 'E4DDEEDB66776D42'

p21 = '641E10E96186B8A0'
c21 = '7918C1C6400F4AA2'
p22 = 'CA4E94596186B8A0'
c22 = 'B8D0DC72CD2F6579'

def E(r):#E扩展,二进制字符串
    rr=r[31]+r[:5]
    for i in range(1,7):
        rr+=r[(4*i-1):(4*i+5)]
    rr+=r[27:]+r[0]
    #print('E扩展',rr)
    return rr

def S(sin,i):#十进制数字输入输出，可直接异或
    S_box=[[[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],#S1
            [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
            [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
            [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],
           [[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],#S2
            [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
            [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
            [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]],
           [[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],#S3
            [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
            [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
            [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],
           [[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],#S4
            [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
            [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
            [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],
           [[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],#S5
            [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
            [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
            [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]],
           [[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],#S6
            [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
            [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
            [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],
           [[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],#S7
            [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
            [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
            [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],
           [[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],#S8
            [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
            [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
            [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]]
    r=bin(sin)[2:].rjust(6,'0')#输入十进制转6位二进制
    a=int(r[0]+r[5],2)
    b=int(r[1:5],2)
    sout=S_box[i][a][b]
    return sout#返回十进制

def inv_p(pin):
    invP=[9,17,23,31,
          13,28,2,18,
          24,16,30,6,
          26,20,10,1,
          8,14,25,3,
          4,29,11,19,
          32,12,22,7,
          5,27,15,21]
    pout=''
    for i in range(32):
        pout+=pin[invP[i]-1]
    return pout


#差分攻击表，其内存储符合S盒输入差分输出差分的输入对
dtable=[]
for i in range(8):#8个S盒
    table_j=[]
    for j in range(64):#64种输入差分
        table_k=[]
        for k in range(16):#16种输出差分
            table_k.append([])
        for a in range(64):
            b=a^j
            aa=S(a,i)
            bb=S(b,i)
            sout=aa^bb#输出差分
            table_k[sout].append(a)#十进制
        table_j.append(table_k)
    dtable.append(table_j)

def XOR(a,b,j):#分组计算出8个int值
    listt=[]#存储异或加分组
    for i in range(8):
        h=j*i
        t=j*(i+1)
        aa=int(a[h:t],2)^int(b[h:t],2)
        listt.append(aa)
    return listt
    
#获得必要信息，在线查表筛选   
def get_A_B_sout(p11,c11,p12,c12):
    c11=bin(int(c11,16))[2:].rjust(64,'0')
    c12=bin(int(c12,16))[2:].rjust(64,'0')
    p11=bin(int(p11,16))[2:].rjust(64,'0')
    p12=bin(int(p12,16))[2:].rjust(64,'0')
    R3_1=c11[32:]
    R3_2=c12[32:]
    L3_1=c11[:32]
    L3_2=c12[:32]
    L0_1=p11[:32]
    L0_2=p12[:32]
    temp1=XOR(R3_1,R3_2,4)
    temp2=XOR(L0_1,L0_2,4)
    ttt=''
    for i in range(8):
        temp=temp1[i]^temp2[i]
        ttt+=(bin(temp)[2:].rjust(4,'0'))
    sout=[]
    ss=inv_p(ttt)
    for i in range(8):
        sout.append(int(ss[i*4:(i+1)*4],2))
    A=E(L3_1)
    B=E(L3_2)
    return A,B,sout


A,B,sout=get_A_B_sout(p11,c11,p12,c12)
sin=XOR(A,B,6)


table=[]
for i in range(8):
    table_i=[]
    for item in dtable[i][sin[i]][sout[i]]:
        temp=int(A[6*i:6*(i+1)],2)
        table_i.append(item^temp)
    table.append(table_i)


A_,B_,sout_=get_A_B_sout(p21,c21,p22,c22)
sin_=XOR(A_,B_,6)

table_=[]
for i in range(8):
    table_i=[]
    for item in dtable[i][sin_[i]][sout_[i]]:
        temp=int(A_[6*i:6*(i+1)],2)
        table_i.append(item^temp)
    table_.append(table_i)

#两个列表取交集。
tt=[[],[],[],[],[],[],[],[]]
for i in range(8):
    for ii in table[i]:
        if ii in table_[i]:
            tt[i].append(hex(ii)[2:])
print(tt)
            













            
            
