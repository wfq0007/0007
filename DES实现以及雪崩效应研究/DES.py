#DES加密算法
import time
from os import urandom

plaintext=0x0000000000000000
key=0xec7cbc1235789abd

def by_bit(x):#按16进制解析明文密钥翻译为01串
    b_64=bin(x)[2:]
    b_64=b_64.rjust(64,'0')
    return b_64

plt=by_bit(plaintext)
k=by_bit(key)#01字符串

def by_16(x):#16进制输出
    text=''
    for i in range(16):
        a=int(x[4*i])*8+int(x[4*i+1])*4+int(x[4*i+2])*2+int(x[4*i+3])
        text+=hex(a)[2]
    return text
        

#初始IP置换
def IP(p):
    IP=[58,50,42,34,26,18,10,2,
        60,52,44,36,28,20,12,4,
        62,54,46,38,30,22,14,6,
        64,56,48,40,32,24,16,8,
        57,49,41,33,25,17,9,1,
        59,51,43,35,27,19,11,3,
        61,53,45,37,29,21,13,5,
        63,55,47,39,31,23,15,7]
    pp=''
    for i in range(64):
        pp+=p[IP[i]-1]
    #print('IP置换',pp)
    return pp

def IP_invert(p):
    IP=[40,8,48,16,56,24,64,32,
        39,7,47,15,55,23,63,31,
        38,6,46,14,54,22,62,30,
        37,5,45,13,53,21,61,29,
        36,4,44,12,52,20,60,28,
        35,3,43,11,51,19,59,27,
        34,2,42,10,50,18,58,26,
        33,1,41,9,49,17,57,25]
    pp=''
    for i in range(64):
        pp+=p[IP[i]-1]
    return pp

    
#以下是密钥编排方案
def PC_1(k):
    PC=[57,49,41,33,25,17,9,
        1,58,50,42,34,26,18,
        10,2,59,51,43,35,27,
        19,11,3,60,52,44,36,
        63,55,47,39,31,23,15,
        7,62,54,46,38,30,22,
        14,6,61,53,45,37,29,
        21,13,5,28,20,12,4]
    p=''
    for i in range(56):
        p+=(k[PC[i]-1])
    return p

def movel(k,i):#循环左移
    G=[1,1,2,2,2,2,2,2,
       1,2,2,2,2,2,2,1]
    n=G[i]
    return k[n:]+k[:n]

def PC_2(k):
    PC=[14,17,11,24,1,5,
        3,28,15,6,21,10,
        23,19,12,4,26,8,
        16,7,27,20,13,2,
        41,52,31,37,47,55,
        30,40,51,45,33,48,
        44,49,39,56,34,53,
        46,42,50,36,29,32]
    p=''
    for i in range(48):
        p+=(k[PC[i]-1])
    return p

def key_create(k):
    #去除校验位+PC-1置换
    kk=PC_1(k)
    c=kk[:28]
    d=kk[28:]
    #16轮
    key=['']*16#密钥表
    for i in range(16):
        c=movel(c,i)
        d=movel(d,i)#循环移位
        key[i]=PC_2(c+d)#PC_2置换
        #print('{j:4}'.format(j='K'+str(i+1)),key[i])
    #print('')
    return key


#以下是f函数相关
def E(r):#E扩展
    rr=r[31]+r[:5]
    for i in range(1,7):
        rr+=r[(4*i-1):(4*i+5)]
    rr+=r[27:]+r[0]
    #print('E扩展',rr)
    return rr

def S(r):
    S_box=[[[14,4,13,1,2,15,11,8,3,10,6,12,5,9,0,7],#S1
            [0,15,7,4,14,2,13,1,10,6,12,11,9,5,3,8],
            [4,1,14,8,13,6,2,11,15,12,9,7,3,10,5,0],
            [15,12,8,2,4,9,1,7,5,11,3,14,10,0,6,13]],
           [[15,1,8,14,6,11,3,4,9,7,2,13,12,0,5,10],#S2
            [3,13,4,7,15,2,8,14,12,0,1,10,6,9,11,5],
            [0,14,7,11,10,4,13,1,5,8,12,6,9,3,2,15],
            [13,8,10,1,3,15,4,2,11,6,7,12,0,5,14,9]],
           [[10,0,9,14,6,3,15,5,1,13,12,7,11,4,2,8],#S3
            [13,7,0,9,3,4,6,10,2,8,5,14,12,11,15,1],
            [13,6,4,9,8,15,3,0,11,1,2,12,5,10,14,7],
            [1,10,13,0,6,9,8,7,4,15,14,3,11,5,2,12]],
           [[7,13,14,3,0,6,9,10,1,2,8,5,11,12,4,15],#S4
            [13,8,11,5,6,15,0,3,4,7,2,12,1,10,14,9],
            [10,6,9,0,12,11,7,13,15,1,3,14,5,2,8,4],
            [3,15,0,6,10,1,13,8,9,4,5,11,12,7,2,14]],
           [[2,12,4,1,7,10,11,6,8,5,3,15,13,0,14,9],#S5
            [14,11,2,12,4,7,13,1,5,0,15,10,3,9,8,6],
            [4,2,1,11,10,13,7,8,15,9,12,5,6,3,0,14],
            [11,8,12,7,1,14,2,13,6,15,0,9,10,4,5,3]],
           [[12,1,10,15,9,2,6,8,0,13,3,4,14,7,5,11],#S6
            [10,15,4,2,7,12,9,5,6,1,13,14,0,11,3,8],
            [9,14,15,5,2,8,12,3,7,0,4,10,1,13,11,6],
            [4,3,2,12,9,5,15,10,11,14,1,7,6,0,8,13]],
           [[4,11,2,14,15,0,8,13,3,12,9,7,5,10,6,1],#S7
            [13,0,11,7,4,9,1,10,14,3,5,12,2,15,8,6],
            [1,4,11,13,12,3,7,14,10,15,6,8,0,5,9,2],
            [6,11,13,8,1,4,10,7,9,5,0,15,14,2,3,12]],
           [[13,2,8,4,6,15,11,1,10,9,3,14,5,0,12,7],#S8
            [1,15,13,8,10,3,7,4,12,5,6,11,0,14,9,2],
            [7,11,4,1,9,12,14,2,0,6,10,13,15,3,5,8],
            [2,1,14,7,4,10,8,13,15,12,9,0,3,5,6,11]]]
    p=['']*8
    for i in range(8):
        a=r[i][0]*2+r[i][5]
        b=r[i][1]*8+r[i][2]*4+r[i][3]*2+r[i][4]
        if(i==4 and a==3 and b==11):
            print('zaogao')
        n=bin(S_box[i][a][b])[2:]
        p[i]=n.rjust(4,'0')#4长比特字符串
    #print('S盒',''.join(p))
    return ''.join(p)

def P(r):
    P=[16,7,20,21,
       29,12,28,17,
       1,15,23,26,
       5,18,31,10,
       2,8,24,14,
       32,27,3,9,
       19,13,30,6,
       22,11,4,25]
    p=''
    for i in range(32):
        p+=r[P[i]-1]
    #print('P置换',p)
    return p
            
def funcf(r,k):
    #print('E前的r',r)
    rr=E(r)#E扩展
    listt=[]#存储异或加分组
    for i in range(8):
        listt.append([])
        for j in range(6):
            n=int(rr[6*i+j])^int(k[6*i+j])
            listt[i].append(n)
    #print('f中的异或',listt)
    #S盒压缩
    rrr=S(listt)
    #P置换
    return P(rrr)


#DES加密主体部分
def encryption(p,k):#一组64bit
    #获取密钥表
    key=key_create(k)
    #初始置换IP
    p=IP(p)
    #左，右
    pl=p[:32]
    pr=p[32:]
    for i in range(6):#前6轮
        pl_new=pr
        prk=funcf(pr,key[i])#f函数
        #pl与prk异或（32bit)
        pr_new=''
        for j in range(32):
            n=int(pl[j])^int(prk[j])
            pr_new+=str(n)
        #print('第{}轮密文为{}'.format(i+1,by_16(pl_new+pr_new)))
        pl=pl_new
        pr=pr_new
    print('6轮加密后{}'.format(by_16(pl+pr)))
    #IP逆置换
    cipher=IP_invert(pr+pl)
    #print('最终密文为{}'.format(by_16(cipher)))
    return cipher


#encryption(plt,k)

#感受混淆扩散
print('DES原轮函数')
plt=plt[:64]
k=k[:64]

#明文由低到高分别改变比特
print('不改变明文')
c_old=encryption(plt,k)
for i in range(56,64):
    print('改变明文第{}比特'.format(i+1))
    b=int(plt[i])^1
    pp=plt[:i]+str(b)+plt[i+1:]
    #print(pp)
    c_new=encryption(pp,k)
    #异或得出几个比特改变,值位1的位数
    n=0
    for i in range(64):
        n+=int(c_old[i])^int(c_new[i])
    print('改变了 {} 个比特'.format(n))

print('\n')   
#密钥由低到高分别改变比特
print('不改变密钥')
c_old=encryption(plt,k)
for i in range(56,64):
    print('改变密钥第{}比特'.format(i+1))
    b=int(k[i])^1
    kk=k[:i]+str(b)+k[i+1:]
    #print(pp)
    c_new=encryption(plt,kk)
    #异或得出几个比特改变,值位1的位数
    n=0
    for i in range(64):
        n+=int(c_old[i])^int(c_new[i])
    print('改变了 {} 个比特'.format(n))
    


'''
#统计比较时间，这里认为一次DES是64bit
def bitt(x):
    c=''
    for i in x:#二进制输出
        a=bin(i)[2:]
        a=a.rjust(8,'0')
        c+=a
    return c

start_time=time.time()
for i in range(1000):
    pltt=bitt(urandom(8))
    keyy=bitt(urandom(8))
    #字节转二进制
    encryption(pltt,keyy)
print('平均1次所需时间:{}'.format((time.time()-start_time)/1000))

'''     
        
        
        
